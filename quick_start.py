#!/usr/bin/env python3
"""
Inicio r√°pido para el Convertidor de Voz a Voz Multiidioma
Ejecuta este archivo para iniciar la aplicaci√≥n con configuraci√≥n predeterminada
"""

import os
import sys
import logging
from pathlib import Path

# Configurar logging b√°sico
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_requirements():
    """Verificar que todas las dependencias est√©n instaladas."""
    required_modules = [
        'gradio',
        'speech_recognition',
        'googletrans',
        'gtts',
        'pyttsx3',
        'pygame',
        'whisper',
        'numpy',
        'torch'
    ]

    missing_modules = []

    for module in required_modules:
        try:
            __import__(module)
            logger.info(f"‚úÖ {module} - OK")
        except ImportError:
            missing_modules.append(module)
            logger.error(f"‚ùå {module} - NO INSTALADO")

    if missing_modules:
        logger.error(f"\nüì¶ Faltan instalar las siguientes dependencias: {', '.join(missing_modules)}")
        logger.info("\nüí° Ejecuta: pip install -r requirements.txt")
        return False

    return True

def check_microphone():
    """Verificar que el micr√≥fono est√© disponible."""
    try:
        import speech_recognition as sr
        recognizer = sr.Recognizer()

        with sr.Microphone() as source:
            recognizer.adjust_for_ambient_noise(source, duration=1)
            logger.info("‚úÖ Micr√≥fono detectado y funcionando correctamente")
            return True

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è  Problema con el micr√≥fono: {e}")
        logger.info("üí° Aseg√∫rate de que el micr√≥fono est√© conectado y con permisos")
        return False

def download_whisper_model():
    """Descargar modelo Whisper si no existe."""
    try:
        logger.info("üîÑ Verificando modelo Whisper...")
        import whisper

        # Intentar cargar el modelo tiny (m√°s peque√±o y r√°pido)
        model = whisper.load_model("tiny")
        logger.info("‚úÖ Modelo Whisper cargado exitosamente")
        return True

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è  No se pudo cargar el modelo Whisper: {e}")
        logger.info("üí° El modelo se descargar√° autom√°ticamente al usar la aplicaci√≥n")
        return False

def main():
    """Funci√≥n principal de inicio r√°pido."""
    print("üöÄ Iniciando Convertidor de Voz a Voz Multiidioma")
    print("=" * 60)

    # Verificar directorio actual
    current_dir = Path.cwd()
    logger.info(f"üìÅ Directorio de trabajo: {current_dir}")

    # Verificar archivos necesarios
    required_files = ['app.py', 'requirements.txt', 'modules/']
    missing_files = []

    for file in required_files:
        if file.endswith('/'):
            if not (current_dir / file).exists():
                missing_files.append(file)
        else:
            if not (current_dir / file).exists():
                missing_files.append(file)

    if missing_files:
        logger.error(f"‚ùå Faltan archivos necesarios: {', '.join(missing_files)}")
        logger.info("üí° Aseg√∫rate de estar en el directorio correcto del proyecto")
        return

    logger.info("‚úÖ Archivos del proyecto verificados")

    # Verificar dependencias
    print("\nüì¶ Verificando dependencias...")
    if not check_requirements():
        return

    # Verificar micr√≥fono
    print("\nüé§ Verificando micr√≥fono...")
    check_microphone()

    # Verificar modelo Whisper
    print("\nüß† Verificando modelo Whisper...")
    download_whisper_model()

    # Iniciar aplicaci√≥n
    print("\nüöÄ Iniciando aplicaci√≥n...")
    print("=" * 60)
    print("üåê La aplicaci√≥n se abrir√° en tu navegador autom√°ticamente")
    print("üí° Si no se abre autom√°ticamente, ve a: http://localhost:7860")
    print("‚èπÔ∏è  Presiona Ctrl+C para detener la aplicaci√≥n")
    print("=" * 60)

    try:
        # Importar y ejecutar la aplicaci√≥n
        from app import VoiceTranslatorApp

        app = VoiceTranslatorApp()

        # Lanzar con configuraci√≥n optimizada
        app.launch(
            server_name="0.0.0.0",  # Accesible desde cualquier dispositivo en la red
            server_port=7860,
            share=False,  # Cambiar a True si quieres enlace p√∫blico
            show_error=True,
            debug=False
        )

    except KeyboardInterrupt:
        print("\n\nüõë Aplicaci√≥n detenida por el usuario")
        logger.info("Aplicaci√≥n cerrada correctamente")

    except Exception as e:
        logger.error(f"‚ùå Error al iniciar la aplicaci√≥n: {e}")
        print(f"\nüí° Si el problema persiste, consulta la documentaci√≥n en README.md")
        return

if __name__ == "__main__":
    # Verificar que estamos en el directorio correcto
    if not Path("app.py").exists():
        print("‚ùå Error: No se encontr√≥ app.py")
        print("üí° Ejecuta este script desde el directorio ra√≠z del proyecto")
        sys.exit(1)

    main()